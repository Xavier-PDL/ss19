/*
 * This file is generated by Entity Class Compiler, (c) CroTeam 1997-98
 */

#line 21 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"

#include "StdH.h"
#include <Engine/Entities/InternalClasses.h>
#include <Engine/Base/CRC.h>
#include <Engine/Base/Stream.h>
#include <Engine/Base/Console.h>
#include <Engine/Models/ModelObject.h>

#include <Engine/Classes/MovableModelEntity.h>
#include <Engine/Classes/MovableModelEntity_tables.h>
void CMovableModelEntity::SetDefaultProperties(void) {
  en_iCollisionBox = 0;
  en_iWantedCollisionBox = 0;
  CMovableEntity::SetDefaultProperties();
}
  void CMovableModelEntity::ChecksumForSync(ULONG & ulCRC,INDEX iExtensiveSyncCheck) 
#line 45 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
{
#line 46 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
CMovableEntity  :: ChecksumForSync  (ulCRC  , iExtensiveSyncCheck );
#line 47 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
if(iExtensiveSyncCheck  > 0){
#line 48 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
CRC_AddLONG  (ulCRC  , en_iCollisionBox );
#line 49 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
CRC_AddLONG  (ulCRC  , en_iWantedCollisionBox );
#line 50 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
#line 51 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
  void CMovableModelEntity::DumpSync_t(CTStream & strm,INDEX iExtensiveSyncCheck) 
#line 54 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
{
#line 55 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
CMovableEntity  :: DumpSync_t  (strm  , iExtensiveSyncCheck );
#line 56 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
if(iExtensiveSyncCheck  > 0){
#line 57 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
strm  . FPrintF_t  ("collision box: %d(%d)\n" , en_iCollisionBox  , en_iWantedCollisionBox );
#line 58 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
#line 59 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
  void CMovableModelEntity::PreMoving(void) 
#line 63 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
{
#line 65 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
if(en_iCollisionBox  != en_iWantedCollisionBox ){
#line 67 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
ChangeCollisionBoxIndexNow  (en_iWantedCollisionBox );
#line 68 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
#line 70 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
CMovableEntity  :: PreMoving  ();
#line 71 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
  void CMovableModelEntity::DoMoving(void) 
#line 73 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
{
#line 74 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
CMovableEntity  :: DoMoving  ();
#line 75 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
  INDEX CMovableModelEntity::GetCollisionBoxIndex(void) 
#line 79 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
{
#line 80 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
return en_iCollisionBox ;
#line 81 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
  BOOL CMovableModelEntity::CheckForCollisionNow(INDEX iNewCollisionBox,CEntity * * ppenObstacle) 
#line 85 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
{
#line 87 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
extern  BOOL CanEntityChangeCollisionBox  (CEntity  * pen  , INDEX iNewCollisionBox  , CEntity  * * ppenObstacle );
#line 88 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
return ! CanEntityChangeCollisionBox  (this  , en_iCollisionBox  , ppenObstacle );
#line 89 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
  BOOL CMovableModelEntity::ChangeCollisionBoxIndexNow(INDEX iNewCollisionBox,CEntity * * ppenObstacle) 
#line 93 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
{
#line 95 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
if(iNewCollisionBox  == en_iCollisionBox ){
#line 97 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
return TRUE ;
#line 98 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
#line 102 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
extern  BOOL CanEntityChangeCollisionBox  (CEntity  * pen  , INDEX iNewCollisionBox  , CEntity  * * ppenObstacle );
#line 103 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
BOOL bCanChange  = CanEntityChangeCollisionBox  (this  , iNewCollisionBox  , ppenObstacle );
#line 106 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
if(! bCanChange ){
#line 109 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
return FALSE ;
#line 110 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
#line 113 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
if(en_RenderType  == CEntity  :: RT_SKAMODEL  || en_RenderType  == CEntity  :: RT_SKAEDITORMODEL ){
#line 114 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
if(GetModelInstance  () != NULL ){
#line 116 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
GetModelInstance  () -> mi_iCurentBBox  = iNewCollisionBox ;
#line 117 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
#line 118 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
#line 120 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
en_iCollisionBox  = iNewCollisionBox ;
#line 121 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
en_iWantedCollisionBox  = iNewCollisionBox ;
#line 124 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
ModelChangeNotify  ();
#line 127 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
return TRUE ;
#line 128 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
  BOOL CMovableModelEntity::ChangeCollisionBoxIndexNow(INDEX iNewCollisionBox) 
#line 132 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
{
#line 133 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
CEntity  * penDummy ;
#line 134 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
return ChangeCollisionBoxIndexNow  (iNewCollisionBox  , & penDummy );
#line 135 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
  void CMovableModelEntity::ForceCollisionBoxIndexChange(INDEX iNewCollisionBox) 
#line 139 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
{
#line 141 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
if(en_RenderType  == CEntity  :: RT_SKAMODEL  || en_RenderType  == CEntity  :: RT_SKAEDITORMODEL ){
#line 142 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
if(GetModelInstance  () != NULL ){
#line 144 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
GetModelInstance  () -> mi_iCurentBBox  = iNewCollisionBox ;
#line 145 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
#line 146 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
#line 148 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
en_iCollisionBox  = iNewCollisionBox ;
#line 149 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
en_iWantedCollisionBox  = iNewCollisionBox ;
#line 152 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
ModelChangeNotify  ();
#line 153 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
  void CMovableModelEntity::ChangeCollisionBoxIndexWhenPossible(INDEX iNewCollisionBox) 
#line 157 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
{
#line 158 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
en_iWantedCollisionBox  = iNewCollisionBox ;
#line 159 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
  void CMovableModelEntity::Read_t(CTStream * istr) 
#line 169 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
{
#line 170 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
CMovableEntity  :: Read_t  (istr );
#line 171 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
  void CMovableModelEntity::Write_t(CTStream * ostr) 
#line 174 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
{
#line 175 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
CMovableEntity  :: Write_t  (ostr );
#line 176 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
  
#line 179 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
SLONG CMovableModelEntity::GetUsedMemory(void) 
#line 180 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
{
#line 181 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
return (sizeof  (CMovableModelEntity ) - sizeof  (CMovableEntity ) + CMovableEntity  :: GetUsedMemory  ());
#line 182 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
}
BOOL CMovableModelEntity::
#line 189 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
Dummy(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CMovableModelEntity_Dummy
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CMovableModelEntity::Dummy expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput; ASSERT(FALSE); return TRUE;};BOOL CMovableModelEntity::
#line 192 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
WaitUntilScheduledAnimStarts(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT STATE_CMovableModelEntity_WaitUntilScheduledAnimStarts
  ASSERTMSG(__eeInput.ee_slEvent==EVENTCODE_EVoid, "CMovableModelEntity::WaitUntilScheduledAnimStarts expects 'EVoid' as input!");  const EVoid &e = (const EVoid &)__eeInput;
#line 194 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
ASSERT  (en_RenderType  == CEntity  :: RT_MODEL  || en_RenderType  == CEntity  :: RT_EDITORMODEL );
#line 195 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
FLOAT fToWait  = GetModelObject  () -> ao_tmAnimStart  - _pTimer  -> CurrentTick  ();
#line 196 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
if(!(fToWait  > 0)){ Jump(STATE_CURRENT,0x00020004, FALSE, EInternal());return TRUE;}
#line 198 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
SetTimerAfter(fToWait  + _pTimer  -> TickQuantum );
Jump(STATE_CURRENT, 0x00020002, FALSE, EBegin());return TRUE;}BOOL CMovableModelEntity::H0x00020002_WaitUntilScheduledAnimStarts_01(const CEntityEvent &__eeInput) {
#undef STATE_CURRENT
#define STATE_CURRENT 0x00020002
switch(__eeInput.ee_slEvent) {case EVENTCODE_EBegin: return TRUE;case EVENTCODE_ETimer: Jump(STATE_CURRENT,0x00020003, FALSE, EInternal()); return TRUE;default: return FALSE; }}BOOL CMovableModelEntity::H0x00020003_WaitUntilScheduledAnimStarts_02(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x00020003
;Jump(STATE_CURRENT,0x00020004, FALSE, EInternal());return TRUE;}BOOL CMovableModelEntity::H0x00020004_WaitUntilScheduledAnimStarts_03(const CEntityEvent &__eeInput){
ASSERT(__eeInput.ee_slEvent==EVENTCODE_EInternal);
#undef STATE_CURRENT
#define STATE_CURRENT 0x00020004

#line 200 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
Return(STATE_CURRENT,EReturn  ());
#line 200 "X:/Git/Repos/Serious-Engine/Sources/Engine/Classes/MovableModelEntity.es"
return TRUE; ASSERT(FALSE); return TRUE;};